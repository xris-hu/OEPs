<source lang="pyton">
  OEP: 35
  Title: DDXF token exchange protocol
  Author: huguanjun<guanjunhu007@gmail.com>,tanyuan<tanyuan666@gmail.com>
  Type: Standard
  Status: Active
  Created: 2019-01-02
</source>

==Abstract==
OEP-35 is a standard cryto token exchange protocol base on decentralize exchange solution. exchange matching the off-chain orders and relay on ontology blockchain. ontology provide token proxy smart contract service for token settlement, Any platform or institution can apply be an exchange.

==Motivation==
The current centralized exchange lacks transparency, and the circulation of tokens faces too many restrictions, transaction costs are high, and security is not guaranteed. This agreement is aimed at solving the current problem. Based on this agreement, market participants choose their own exchanges and exchange data tokens themselves to achieve more efficient data and token circulation.

==Architecture==
According to the protocol architecture， we divides the exchange platform into two component<code>Exchange</code> and <code> TokenProxy</code>, it's a modular system.

'''Exchange''' is responsible for combining Maker's and Taker's orders, and sending orders to TokenProxy smart contrat.
<code>Exchange</code> provide interface such as <code>fillorer</code>, <code>CancellingOrder</code>,<code>ExecutingTransaction</code>for traders. 

<code>Exchange</code> can be implemented through off-chain application or smart contract, Any institution can apply to become the exchange, if approved，the maker and taker can send trading orders to the exchange platform,after the exchange matching the maker’s and taker’s orders, it will send the transaction to Token Proxy smart contract, finally the transaction is completed on the blockchain.

'''TokenProxy''' is designed to decouple orders matching and token settlement on the blockchain，because the logic of order matching is too complicated, it allows each component of the system to be upgraded separately.

TokenProxy provides like <code>RegisterExchangeRemoveExchange</code>, <code>AddToken</code>, <code>RemoveToken</code> interface.

<code>TokenProxy</code> main task is responsible for the settlement of cryto token, like <code>OEP-4</code>, <code>OEP-5</code>, <code>OEP-8</code> and other types of tokens.

It should be noted that maker and taker need to approve token to TokenProxy smart contract, otherwise the contract can't transfer your token.

[[Image:https://ws2.sinaimg.cn/large/006tNc79gy1fyucla3yurj30mn0gzt9h.jpg]]

== Related token standard==
Bellow protocol is ontology OEPs token wiki.

OEP-4 protocol, non fungible token protocol:https://github.com/ontio/OEPs/blob/master/OEPS/OEP-4.mediawiki

OEP-5 protocol, fungile token protocol:https://github.com/ontio/OEPs/pull/10

OEP-8 protocol, crypto item protocol :https://github.com/ontio/OEPs/blob/master/OEPS/OEP-8.mediawiki

==Exchange==

===Order Message Format===
{| class="wikitable"
|+
|-
|Field
|Type
|Description
|-
|version
|int
|exchange order version
|-
|makerAddress
|address
|maker wallet address
|-
|makerAssetAmount
|int
|Amount of makerAsset being offered by maker. 
|-
|makerTokenHash
|bytes
|the token hash of offered by maker
|-
|takerAddress
|address
|taker wallet address
|-
|takerAssetAmount
|int
|Amount of takerAsset being bid on by maker. 
|-
|takerTokenHash
|bytes
|the token hash of offered by maker
|-
|makerFee
|int
|Amount of fee paid to feeReceiver by maker
|-
|takerFee
|int
|Amount of fee paid to feeReceiver by taker
|-
|feeTokenHash
|bytes
|Exchange-charged token hash
|-
|version
|int
|exchange order version
|-
|feeReceiver
|bytes
|exchange fee receiver
|-
|expireTime
|int
|order expire time
|}

===Method===
====FillOrder====
<source lang="python">
def FillOrder(order:Order)
</source>
Orders can be filled by calling the following methods on the Exchange contract.

====CancellingOrder====
<source lang="python">
def CancellingOrder(order:Order)
</source>
CancellingOrder cancels the specified order, if success, the order be delete in order list.

====ExecutingTransaction====
<source lang="python">
def ExecutingTransaction(order:Order, proxyId:bytes)
event ExecutingTransaction(order:order, proxyId:bytes)
</source>
ExecutingTransaction will invoke specific token proxy(<code>proxyId</code>) contract, if success, the tokenproxy contract will automatically place the maker and taker's order.
If successful, will push <code>ExecutingTransaction</code> event.

====RegisterTokenProxy====
<source lang="python">
def RegisterTokenProxy(proxyId:bytearray)
event RegisterTokenProxy(proxyId:bytearray)
</source>
<code>proxyId</code> is the TokenProxy contract hash，after register TokenProxy, call the <code>ExecutingTransaction</code> function, it will call the TokenProxy contract's <code>TokenTransferFrom</code> Function
If successful, will push <code>RegisterTokenProxy</code> event.

==Token Proxy==
===Method===
====AddToken====
<source lang="python">
def AddToken(contractHash:bytearray)
event AddToken(contractHash:bytearray)
</source>
<code>contractHash</code>is the token hash, the tokens traded on the exchange must be registered through this function.
The exchanger will support <code>ONT</code> and <code>ONG</code> assets by default.
If successful, will push <code>AddToken</code> event.

====RemoveToken====
<source lang="python">
def RemoveToken(contractHash:bytearray)
event RemoveToken(contractHash:bytearray)
</source>
Tokens that no longer support trading will be removed, <code>contractHash</code> is the token hash.
If successful, will push <code>RemoveToken</code> event.

====GetTokens====
<source lang="python">
def GetTokens()
</source>
Returns all token types supported by token proxy contract.

====RegisterExchange====
<source lang="python">
def RegisterExchange(exchangeId:bytearray)
event RegisterExchange(exchangeId:bytearray)
</source>
The exchange needs to register this function to complete the token settlement on the chain.
If successful, will push <code>RegisterExchange</code> event.

====RemoveExchange====
<source lang="python">
def RemoveExchange(exchangeId:bytearray)
event RemoveExchange(exchangeId:bytearray)
</source>
RemoveExchange will remove unauthorized exchange, all the orders invoked by the exchange will be failed.
If successful, will push <code>RemoveExchange</code> event.

====GetAuthorizedExchange====
<source lang="python">
def GetAuthorizedExchange()
</source>
Return all trusted exchange platforms

====Approve====
<source lang="python">
def approve(from:bytearray, to:bytearray, tokenHash: bytearray, value:int)
event Approve(from:bytearray, to:bytearray, tokenHash:bytearray, value:int)
</source>
The approve allows <code>to</code> account to withdraw from <code>from</code> account multiple times, up to the value amount.If this function is called again it overwrites the current allowance with value.
If successful, will push <code>Approve</code> event.

====ApproveMulti====
<source lang="python">
def ApproveMulti(approveList:bytearray)
</source>
ApproveMulti can perform multiple approve operations at one time.

====Allowance====
<source lang="python">
def Allowance(owner: bytearray, spender: bytearray, tokenHash: bytearray)
</source>
Returns the amount which spender is still allowed to withdraw from owner

====TokenTransferFrom====
<source lang="python">
def TokenTransferFrom(order:Order)
event TokenTransferFrom(order:Order)
</source>
TokenTransferFrom will complete the token settlement operation between maker and taker according to the information of the order.
If successful, will push <code>TokenTransferFrom</code> event.

====TokenTransferFromMulti====
<source lang="python">
def TokenTransferFromMulti(transferList:bytearray)
</source>
TokenTransferFromMulti can perform multiple TokenTransferFrom operations at one time.
